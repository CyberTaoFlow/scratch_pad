## Extensions to the HTTP module can be made by refering to it
## this is a mdified version of the script found here:
##    http://mailman.icsi.berkeley.edu/pipermail/bro/2012-March/005413.html
module HTTP;
export {
    # redefine the HTTP::Info type to include a string named post_body. The variable is to be logged and is optional
    # placing this within an export block makes the changes global
    redef record Info += {
    # the += above extends the HTTP::Info type instead of overwriting it
	    body_length: count &log &optional;
            body_data: string &log &optional;
    };
}

# this event is raised when an HTTP body is being parsed
# this event concatenates the body section of an HTTP entity into the connection's HTTP::Info$post_body variable defined in the previous export block
event http_entity_data(c: connection, is_orig: bool, length: count, data: string)
{
# check if the HTTP entity being examined was generated by the originator (creator) of the connection
# if the HTTP entity was from the responder (most likely the server) of the connection, do nothing
if (is_orig)
    {
    # check if the entity's body variable exists
    if (!c$http?$body_data)
	{
        # if not, set the post_body value to the data of the entity (in ascii hex format)
        c$http$body_data = string_to_ascii_hex(data);
	# also set the post_body_length value to the length of the post_body_data
	c$http$body_length = length;
	}
    else
        {
        # if the body already exists, add the data to it (in ascii hex format)
	# i don't think the += operator works on strings, so we must use the string_cat function
        c$http$body_data = string_cat( c$http$body_data, string_to_ascii_hex(data) );
	c$http$body_length += length;
        }
    }
}

# this event is raise when bro initializes
event bro_init()
{
# this is a declaration of a local filter
# the filter will be used on a Log stream
# the filter is named post_data and will create a new log output file named post_body.log
# the filter includes the values listed
local filter: Log::Filter = [$name="http_body", $path="http_data", $include=set("ts", "id.orig_h", "method", "host", "uri", "user-agent", "body_length", "body_data")];
# the filter is applied to the HTTP::LOG stream
Log::add_filter(HTTP::LOG, filter);
# Because the default Log filter was not disabled from the HTTP::LOG stream, Bro will output both http.log and post_body.log, essentially splitting the HTTP::Log stream 
}

